{"version":3,"sources":["components/UI/Input/Input.js","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","input","props","inputElement","inputClasses","invalid","shouldValidate","touched","push","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","checkValidity","rules","isValid","trim","length","maxLength","test","inputChangedHandler","event","controlName","updatedControls","C_Users_Galina_PhpstormProjects_burger_burger_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_this","C_Users_Galina_PhpstormProjects_burger_burger_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_7___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_8__","e","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_10__","errorMessage","error","message","authRedirect","token","react_router_dom__WEBPACK_IMPORTED_MODULE_14__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_9__","btnType","clicked","React","Component","connect","auth","burgerBuilder","building","authRedirecctPath","dispatch","actions"],"mappings":"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","file":"static/js/4.52774a6a.chunk.js","sourcesContent":["/**\r\n * Created by Galina on 4/16/2019.\r\n */\r\nimport React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = ['InputElement'];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push('Invalid');\r\n    };\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <text\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}\r\n                >\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}/>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Input\">\r\n            <label>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","/**\r\n * Created by Galina on 5/10/2019.\r\n */\r\nimport React from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport  './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect } from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass Auth extends React.Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required:true,\r\n                    isEmail: true\r\n                },\r\n                valid: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required:true,\r\n                    minLength: 6\r\n                },\r\n                valid: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    };\r\n\r\n    componentDidMount () {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();        \r\n        }\r\n    };\r\n\r\n    checkValidity = (value, rules) => {\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            isValid = pattern.test(value) && isValid;\r\n        }\r\n        return isValid;\r\n    };\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls  = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({controls: updatedControls});\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup: !prevState.isSignup\r\n            };\r\n        })\r\n    };\r\n\r\n    render (){\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                changed={(e)=>this.inputChangedHandler(e, formElement.id)}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n            />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form  = <Spinner/>;\r\n        }\r\n        \r\n        let errorMessage = null;\r\n        \r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.token) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className=\"Auth\">\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">Submit</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">Switch to {this.state.isSignup? 'Signin' : 'Signup'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        token: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirecctPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps =(dispatch) =>{\r\n    return {\r\n        onAuth: (email, password, isSignup)=> dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}